using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libbliss"], :libbliss),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/bliss_jll.jl/releases/download/bliss-v0.73.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/bliss.v0.73.0.aarch64-linux-gnu.tar.gz", "7b264fb216a66be3fc9cdf014f33bdcbe72541f33b76e92e078e020aaa3e98cf"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/bliss.v0.73.0.aarch64-linux-musl.tar.gz", "3b8479ef24f4137bfed9d6ae54f6ad1d982f21273bff3b8fa93ab2fad103753b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/bliss.v0.73.0.armv7l-linux-gnueabihf.tar.gz", "b44e27275e4ea7fe9f3376566f156eb10fc89455b307e2781780e4cf11613a60"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/bliss.v0.73.0.armv7l-linux-musleabihf.tar.gz", "a016f12305894642768804e5fc2dd2dedee7daccd15fe88b51708ffc0d49512b"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/bliss.v0.73.0.i686-linux-gnu.tar.gz", "331f0b344ef8b228ca34752be647e5abfe0e542208933542dd86f8723a27386e"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/bliss.v0.73.0.i686-linux-musl.tar.gz", "e9b2580e1a84e2c9b73ddcea109b46e68d3144d41ac5c99ef6f7010fc6c5187d"),
    Windows(:i686) => ("$bin_prefix/bliss.v0.73.0.i686-w64-mingw32.tar.gz", "54aa57b8c3b6bd643871deaff747694866bbed520a6a3878c4d2dd3988854cb6"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/bliss.v0.73.0.powerpc64le-linux-gnu.tar.gz", "9f03dbb7ea56e61ac210f46a841aa46e62c1934965e362f0bf985759790b7f27"),
    MacOS(:x86_64) => ("$bin_prefix/bliss.v0.73.0.x86_64-apple-darwin14.tar.gz", "1596ad41b8bbea848a6b143e0621416db73923b0faf1256fc3bf108e017ae5a9"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/bliss.v0.73.0.x86_64-linux-gnu.tar.gz", "8196a791894acf9d1f554641695b615d463e423619c9f9f8b00652fa4f842122"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/bliss.v0.73.0.x86_64-linux-musl.tar.gz", "a24a05ad4a94c9e2f59707795441d5fb151708a7911d491fa5356ea563377980"),
    FreeBSD(:x86_64) => ("$bin_prefix/bliss.v0.73.0.x86_64-unknown-freebsd11.1.tar.gz", "59966e7a40522612a823f0e264f424316174cb2f6d594030af5af396de1210ae"),
    Windows(:x86_64) => ("$bin_prefix/bliss.v0.73.0.x86_64-w64-mingw32.tar.gz", "82463aa82780c2004d3ebc8b1fc34eaf3a73e31a280f967e0724d88168b547ea"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
