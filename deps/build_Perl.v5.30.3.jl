using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "perl", :perl),
    LibraryProduct(prefix, ["libperl"], :libperl),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/benlorenz/perl_jll.jl/releases/download/Perl-v5.30.3+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Perl.v5.30.3.i686-linux-gnu.tar.gz", "ade7e9d0c67dfb9fb6123d19847ea264d63455a77ad79883c75d0dc08e2c20eb"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Perl.v5.30.3.i686-linux-musl.tar.gz", "c86e671ff5869cb3913a86d7aaaf121c51d4569491006041df61af03577a7278"),
    MacOS(:x86_64) => ("$bin_prefix/Perl.v5.30.3.x86_64-apple-darwin14.tar.gz", "1e066b76ef3053009c34d9e8c3743dac4f7830c28722bc999b294a265fba63c6"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Perl.v5.30.3.x86_64-linux-gnu.tar.gz", "3de938cfa5b4d25b9fa764517f59577eb6691b8380abaf39626d8445fc5846b0"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Perl.v5.30.3.x86_64-linux-musl.tar.gz", "627dc5e836531945f4fca0f7e7312da14ad458b9ed11b692b02d6c100c80e6ed"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
