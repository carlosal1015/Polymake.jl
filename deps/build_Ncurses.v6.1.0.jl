using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libform", "libform6"], :libform),
    LibraryProduct(prefix, ["libmenu", "libmenu6"], :libmenu),
    LibraryProduct(prefix, ["libncurses", "libncurses6"], :libncurses),
    LibraryProduct(prefix, ["libpanel", "libpanel6"], :libpanel),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Ncurses_jll.jl/releases/download/Ncurses-v6.1.0+4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Ncurses.v6.1.0.aarch64-linux-gnu.tar.gz", "d4568fdb5a1de92a02a7180862fee013afc945be013287a8cf90cc1359f6ef78"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Ncurses.v6.1.0.aarch64-linux-musl.tar.gz", "582dbbd089eb9681d28f922f2993a0807a57a7d46f4cf772ad99844dff8fe44a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Ncurses.v6.1.0.armv7l-linux-gnueabihf.tar.gz", "b0b016a3823fc1543ac78b95cc51676a1b9c88a0e66f7452315a1bfe0d0c3d8b"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Ncurses.v6.1.0.armv7l-linux-musleabihf.tar.gz", "ad8a7242119436575714efe2ca193580964f138d9fb4045ce8345622001533ec"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Ncurses.v6.1.0.i686-linux-gnu.tar.gz", "fd78d0cd652c78c6d8fed5a5b336374266504dab0d36079713b038751dacd30d"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Ncurses.v6.1.0.i686-linux-musl.tar.gz", "010f6c3847c89ad5e4a9fb6a28ad098a53c372a15891c934a6154c2dd3226b25"),
    Windows(:i686) => ("$bin_prefix/Ncurses.v6.1.0.i686-w64-mingw32.tar.gz", "b82326ce7c221a6cd15d930acdf50ce1b2359b4ea6202278cb16b7edb1a43552"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Ncurses.v6.1.0.powerpc64le-linux-gnu.tar.gz", "8cda10f78accbd9e756f5de8101cec88ca60992e4efc9b7d47f133b87088619d"),
    MacOS(:x86_64) => ("$bin_prefix/Ncurses.v6.1.0.x86_64-apple-darwin14.tar.gz", "6be415761f416034aec6d305b13f46e2d185d05ca32a417b1b1e4f07b5212f75"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Ncurses.v6.1.0.x86_64-linux-gnu.tar.gz", "e8b59e465dd5475b8bf66698c6f265159272def496b6c7a88f60e6fd3fe84103"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Ncurses.v6.1.0.x86_64-linux-musl.tar.gz", "fc323cd07c6333eb02971a25038f9919ac6538c29f07c84710e1573c4b7ee800"),
    FreeBSD(:x86_64) => ("$bin_prefix/Ncurses.v6.1.0.x86_64-unknown-freebsd11.1.tar.gz", "33c48c47c6d5bd3107ebd6a49fd80811f5efc47ee0d73a5b82fe3edd6215ea39"),
    Windows(:x86_64) => ("$bin_prefix/Ncurses.v6.1.0.x86_64-w64-mingw32.tar.gz", "9d757b1544515b5f187f24921c0d8643ae0e74ee6ae65dd4287215d9c40528dc"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
