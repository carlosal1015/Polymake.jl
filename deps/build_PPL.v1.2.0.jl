using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "ppl-config", :ppl_config),
    ExecutableProduct(prefix, "ppl_lcdd", :ppl_lcdd),
    ExecutableProduct(prefix, "ppl_pips", :ppl_pips),
    LibraryProduct(prefix, ["libppl"], :libppl),
    LibraryProduct(prefix, ["libppl_c"], :libppl_c),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/PPL_jll.jl/releases/download/PPL-v1.2.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.aarch64-linux-gnu-cxx03.tar.gz", "45e43c14f936256e23f755694aaaba0fb7e5380c8ce82b293dc5c4cfb3358cc4"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.aarch64-linux-gnu-cxx11.tar.gz", "e82a4a553ffb093ef4fc6eba97a6c28bb37efd0306f6f833c23f3ffd802d5711"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.aarch64-linux-musl-cxx03.tar.gz", "59ceb9c858100a016e967872a07c18695759b769c07d2dc0012984c75b4b00d8"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.aarch64-linux-musl-cxx11.tar.gz", "0a4824eaf9c37e276f905fd47274bb6382b523aaec765247567e9d045c6fd3ab"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.armv7l-linux-gnueabihf-cxx03.tar.gz", "c66960787deb7af99bd7a6f41de6d3456c0fe1d42620ce8ef642081bd9f4206f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.armv7l-linux-gnueabihf-cxx11.tar.gz", "f53d603734f7170e13e74bf0237c92f8a0fe32b2cb81fd8d0ac4c9fc9b066b94"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.armv7l-linux-musleabihf-cxx03.tar.gz", "cff146ba347de9f2a6057cd31333b1af2edfa0435b57a2218bf429d13e2410b8"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.armv7l-linux-musleabihf-cxx11.tar.gz", "ed7fd98ac3acc9532e5a87e22d8ab791aa1a23c6066c3acc02dad7e68e98c1ce"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.i686-linux-gnu-cxx03.tar.gz", "a0c121abc0434f542c65dd87d2330c7a2aacd5722e5154191cdfc606cff26e58"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.i686-linux-gnu-cxx11.tar.gz", "a5ee312da4508e5c408e66586b6c2f2a350bd71d316e370400a83f86e29746b3"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.i686-linux-musl-cxx03.tar.gz", "df3c0520d6a7207c20aa98a58fafea7b1238a196a46ed1524c2d5fb2a4809301"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.i686-linux-musl-cxx11.tar.gz", "ae9aafe8c1ce9803b3dc3a2627013715a41388a6d356648f77696eed8d2b38cc"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.i686-w64-mingw32-cxx03.tar.gz", "8c90813740322d25ea8b2427672f8b5f6a720af60421b87fd9a723726049ddff"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.i686-w64-mingw32-cxx11.tar.gz", "de7201c72653dbae050a6e05c302078f4c203f1ca7b6fc1948c1d308128ccbd6"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.powerpc64le-linux-gnu-cxx03.tar.gz", "22ada54075ce33517b68727a4133a1af92b51e0c2fdb1f437a03c82b8074d79a"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.powerpc64le-linux-gnu-cxx11.tar.gz", "e0e573a791e250b185c0bae6794ce182857db4fb19890dea9a95b5beb2512496"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.x86_64-apple-darwin14-cxx03.tar.gz", "b7fbe0ba6a6fe5d41c8a5dbbf2cb69b7d8e0061636c173dbb579bc066373ab62"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.x86_64-apple-darwin14-cxx11.tar.gz", "acafe32b91f3627b5c8e9a13f8c2634f0ae6236ccc9b0324647434a760b4f75f"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.x86_64-linux-gnu-cxx03.tar.gz", "f319b069b7a03aa321a983de04b310d39c08cd74a690fcb3dac62eb6f3c5a272"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.x86_64-linux-gnu-cxx11.tar.gz", "2dbb3763fe2849a2479da8de40184eeb7734166be2ac2644a24f882ef3417076"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.x86_64-linux-musl-cxx03.tar.gz", "4d14cb5e50f4b7acf9b7c430ea80dd4a187c0701a7d6450176fd19862085bd93"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.x86_64-linux-musl-cxx11.tar.gz", "38a03b0f0819e1f33e00a8f2866412d3054e4cb2145e3937dab4846bfd333508"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.x86_64-unknown-freebsd11.1-cxx03.tar.gz", "2074c132f686e9b2da968bfc4ee0571f33296a6e58a3e581744112a1a55418e4"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.x86_64-unknown-freebsd11.1-cxx11.tar.gz", "9e0ea95b871be8f639fb1df90bc8ae097e0ef29a5de72e9fe9ef28bd3fc7c80e"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/PPL.v1.2.0.x86_64-w64-mingw32-cxx03.tar.gz", "748f1d63e71495b028439f9f8867a33f83a986654cfe405e7e8f2e6a92acedc0"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/PPL.v1.2.0.x86_64-w64-mingw32-cxx11.tar.gz", "5f04154ad21d7293e5628ce270ce433b63de40e485e3bf8daf32d70629226fe6"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
