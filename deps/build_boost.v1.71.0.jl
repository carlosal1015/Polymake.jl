using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libboost_atomic"], :libboost_atomic),
    LibraryProduct(prefix, ["libboost_chrono"], :libboost_chrono),
    LibraryProduct(prefix, ["libboost_container"], :libboost_container),
    LibraryProduct(prefix, ["libboost_context"], :libboost_context),
    LibraryProduct(prefix, ["libboost_contract"], :libboost_contract),
    LibraryProduct(prefix, ["libboost_coroutine"], :libboost_coroutine),
    LibraryProduct(prefix, ["libboost_date_time"], :libboost_date_time),
    LibraryProduct(prefix, ["libboost_filesystem"], :libboost_filesystem),
    LibraryProduct(prefix, ["libboost_graph"], :libboost_graph),
    LibraryProduct(prefix, ["libboost_iostreams"], :libboost_iostreams),
    LibraryProduct(prefix, ["libboost_log"], :libboost_log),
    LibraryProduct(prefix, ["libboost_log_setup"], :libboost_log_setup),
    LibraryProduct(prefix, ["libboost_math_c99"], :libboost_math_c99),
    LibraryProduct(prefix, ["libboost_math_c99l"], :libboost_math_c99l),
    LibraryProduct(prefix, ["libboost_math_c99f"], :libboost_math_c99f),
    LibraryProduct(prefix, ["libboost_math_tr1"], :libboost_math_tr1),
    LibraryProduct(prefix, ["libboost_math_tr1f"], :libboost_math_tr1f),
    LibraryProduct(prefix, ["libboost_math_tr1l"], :libboost_math_tr1l),
    LibraryProduct(prefix, ["libboost_prg_exec_monitor"], :libboost_prg_exec_monitor),
    LibraryProduct(prefix, ["libboost_program_options"], :libboost_program_options),
    LibraryProduct(prefix, ["libboost_random"], :libboost_random),
    LibraryProduct(prefix, ["libboost_regex"], :libboost_regex),
    LibraryProduct(prefix, ["libboost_serialization"], :libboost_serialization),
    LibraryProduct(prefix, ["libboost_stacktrace_basic"], :libboost_stacktrace_basic),
    LibraryProduct(prefix, ["libboost_stacktrace_noop"], :libboost_stacktrace_noop),
    LibraryProduct(prefix, ["libboost_system"], :libboost_system),
    LibraryProduct(prefix, ["libboost_thread"], :libboost_thread),
    LibraryProduct(prefix, ["libboost_timer"], :libboost_timer),
    LibraryProduct(prefix, ["libboost_type_erasure"], :libboost_type_erasure),
    LibraryProduct(prefix, ["libboost_unit_test_framework"], :libboost_unit_test_framework),
    LibraryProduct(prefix, ["libboost_wave"], :libboost_wave),
    LibraryProduct(prefix, ["libboost_wserialization"], :libboost_wserialization),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/boost_jll.jl/releases/download/boost-v1.71.0+2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.aarch64-linux-gnu-cxx03.tar.gz", "577cf03a8cb7508de59651084bb186f8f8fd658ede8c9a0b5831443f758289af"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.aarch64-linux-gnu-cxx11.tar.gz", "cbaf12f81c76630dd8965a8fd9a1979d0b12dba8c5af859c12b7f645eaeab049"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.aarch64-linux-musl-cxx03.tar.gz", "06e8e5caf3405500379adb47ac5fa8516ab42c63f0766c15426a4b78aaf4aed6"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.aarch64-linux-musl-cxx11.tar.gz", "a40116695bde7d217c6685200cdb177d72fab40a2f54c3b59fd11506935b64ec"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.armv7l-linux-gnueabihf-cxx03.tar.gz", "2bcbfe11a2ce2e4873cf055e4a87b9f4c4d7444ec8a8665944b8a2ecd6a8e574"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.armv7l-linux-gnueabihf-cxx11.tar.gz", "8d9a31a57d4d7e7eddfdb525f7ddc6ee9bca5c5c2ccfc4c535a3c606fc13a3c8"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.armv7l-linux-musleabihf-cxx03.tar.gz", "d73326edb2e834be356d0f47996b0202a7965b92d1d5f406010f9d10d7e7e969"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.armv7l-linux-musleabihf-cxx11.tar.gz", "23ae321e900b8c239bd339ee077740bb37b7debfbbd62896876c8bfb40933157"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.i686-linux-gnu-cxx03.tar.gz", "83b4512da350cd76132ad17d302990578d80748bd9038eb67fd8b8e949c27cb4"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.i686-linux-gnu-cxx11.tar.gz", "39577429a352a6312464f2d64130edcc82fda97eba2b1d2b1c648c45daa76966"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.i686-linux-musl-cxx03.tar.gz", "c805c4bde378e5f21f05fce2adbea9cbb1e14431239fb3cd1c3cc2af7332f9fd"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.i686-linux-musl-cxx11.tar.gz", "036f885136c827d5776f47cdefef0c709bdefbf50a2381f25fdbcaae8cf2d4cc"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.i686-w64-mingw32-cxx03.tar.gz", "a70662cb3a914f07af7e6cea84d74820d724dec7fc44044e527f860f6aa3e9c1"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.i686-w64-mingw32-cxx11.tar.gz", "6a7607d203e167638def9c405e5a4a0da2601e4ea59d3f7ca44020baa901ca92"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.powerpc64le-linux-gnu-cxx03.tar.gz", "f9c8063620d550b295509327ba9496489083766b312425d497595bb95cd2e67a"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.powerpc64le-linux-gnu-cxx11.tar.gz", "8e677974fc19d76bba3e83f41c0359f006ce906f3d32110a0106236538fc0595"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.x86_64-apple-darwin14-cxx03.tar.gz", "50dd012bb342908eae6a08f94473baf87ca488d5c2dfbec2ef8d7fbecbaa77c8"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.x86_64-apple-darwin14-cxx11.tar.gz", "ec8f1f817bd7d135aaa446d1354c43ae01f45529ea0a3ce6337699e864104928"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.x86_64-linux-gnu-cxx03.tar.gz", "271d46927814561c7bde4157cde72f64a3e17f5f8b44b43ff8ce5770adf28935"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.x86_64-linux-gnu-cxx11.tar.gz", "247a904197ff491d2682ff300271f06add212dfff6d80a0329dd6c629ee23f36"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.x86_64-linux-musl-cxx03.tar.gz", "ba09818867b4a9827efb0d8863a0b47c6c1e8d36f99482d3a551bdaff7a77df8"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.x86_64-linux-musl-cxx11.tar.gz", "c83e071f3f01a409b101a280849aebfc9848763423889862aeb1bc1e23af7dc8"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.x86_64-unknown-freebsd11.1-cxx03.tar.gz", "677f11221b0d7f22f47fbf67009f073f45ed0d4c3f3a5b89857b6e6b1e9d1ce2"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.x86_64-unknown-freebsd11.1-cxx11.tar.gz", "bc676ec0a97efc0d1f424c074765c1b7b1476fb7cdd8d54176d829bd633fcdb2"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/boost.v1.71.0.x86_64-w64-mingw32-cxx03.tar.gz", "09426212387d4e923f3e6b2ada75ae10af45c1de0a6d8d3d21fb5da77188a856"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/boost.v1.71.0.x86_64-w64-mingw32-cxx11.tar.gz", "f803ce0089abad114b5bb4b9ca6622c24566c63a3b1ecb1ce969fd50a2964580"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
