using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libhistory", "libhistory8"], :libhistory),
    LibraryProduct(prefix, ["libreadline", "libreadline8"], :libreadline),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Readline_jll.jl/releases/download/Readline-v8.0.4+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Readline.v8.0.4.aarch64-linux-gnu.tar.gz", "c9933c439392914f74c61aa51214a18e53921b480e429352f783feb7b902da88"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Readline.v8.0.4.aarch64-linux-musl.tar.gz", "b2a6e9e2fc6214de9a306fe6fb7a42246e56a28551f06ad70a24452081fba695"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Readline.v8.0.4.armv7l-linux-gnueabihf.tar.gz", "261f64f578f54977a5a41d960488baaff317a0d53074eea20df86190232ec2e2"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Readline.v8.0.4.armv7l-linux-musleabihf.tar.gz", "c7a43204192e36e63d3fd9ab27a042a10e69a1ff0ff916c3647e7044dbe51509"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Readline.v8.0.4.i686-linux-gnu.tar.gz", "d6923d317aec55d99bce60fe6f80e7da57cbacf1649207f8f54927c5fb4ad8ff"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Readline.v8.0.4.i686-linux-musl.tar.gz", "4ecd020ef9e8eda57995dcaa84759b4472bba70c1cff15354b4778387d78364c"),
    Windows(:i686) => ("$bin_prefix/Readline.v8.0.4.i686-w64-mingw32.tar.gz", "b48d662dc97c29a17720bb38a1244678a82f0e2329d4312cdcfa9c9a497a4ad0"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Readline.v8.0.4.powerpc64le-linux-gnu.tar.gz", "3ea6ea96a1f4de12475d4c594e625f0401a647e28e20dd8834c3c7e7613ae02b"),
    MacOS(:x86_64) => ("$bin_prefix/Readline.v8.0.4.x86_64-apple-darwin14.tar.gz", "9b69da24f4c3a1ca05970d1c628092d75ee528c07896630911258720bd21612f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Readline.v8.0.4.x86_64-linux-gnu.tar.gz", "42ce59eecd89f00b5dd64d9aa099555e873bfa94640b07b817f7265a4bd40c42"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Readline.v8.0.4.x86_64-linux-musl.tar.gz", "845fb40c6e7ac447baad43c72f68c53400d54f48e4eb280160bacb61ea5daaeb"),
    FreeBSD(:x86_64) => ("$bin_prefix/Readline.v8.0.4.x86_64-unknown-freebsd11.1.tar.gz", "cc17bef9ba3c54524598c6af61d24cd5cc293b0813a853c4c9ee9b204754414d"),
    Windows(:x86_64) => ("$bin_prefix/Readline.v8.0.4.x86_64-w64-mingw32.tar.gz", "7666d7580a583634e0c343e6b0194cbd2bf347360106b10ef90ef8d4fcdc186a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
