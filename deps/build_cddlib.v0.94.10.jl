using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcdd"], :libcdd),
    LibraryProduct(prefix, ["libcddgmp"], :libcddgmp),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/cddlib_jll.jl/releases/download/cddlib-v0.94.10+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.10.aarch64-linux-gnu.tar.gz", "ac0343d921c15cc629065c2f276167830149e35dd8fb928a3cd4c67c0d5b00ef"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/cddlib.v0.94.10.aarch64-linux-musl.tar.gz", "02872235c3b730fa12c18c3d254d5a17ba2daea378579c9aaf09f727caee1296"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/cddlib.v0.94.10.armv7l-linux-gnueabihf.tar.gz", "ac5c267891cbece8efd5efaa18e91fbde83100301bf0489d4822921621378286"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/cddlib.v0.94.10.armv7l-linux-musleabihf.tar.gz", "24a5aeabb82151d1e0f8b5342a59ceecc897c1253e75e726670a52ce6d1798e1"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.10.i686-linux-gnu.tar.gz", "61730f64b46e6146e4479703981a429dc2b0ce1ad242c78155e103683fb3f127"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/cddlib.v0.94.10.i686-linux-musl.tar.gz", "84bc31644051d706b3182157600b363584406afb8e97644c7773fc70d41c331d"),
    Windows(:i686) => ("$bin_prefix/cddlib.v0.94.10.i686-w64-mingw32.tar.gz", "da9d1c4900e96c12ae55c5269b1de71362546a09e52efa17c4456ce97eae18ca"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.10.powerpc64le-linux-gnu.tar.gz", "674480df9b06e0c166a6fcc2d96843228e06edd23501dc99391e1a496d8cbcb6"),
    MacOS(:x86_64) => ("$bin_prefix/cddlib.v0.94.10.x86_64-apple-darwin14.tar.gz", "0b22e497bad63378562107f23e813cb953c75a6020311c130a770bda3d7d8058"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/cddlib.v0.94.10.x86_64-linux-gnu.tar.gz", "e805b97939f3570af74de0d05e81bb281e422e03ca5e59d07ecc1b81eb5435fe"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/cddlib.v0.94.10.x86_64-linux-musl.tar.gz", "65a0b364758fe6dd6e906270c4d042d691ff3a18763fa88e1b866ee3b65e34ed"),
    FreeBSD(:x86_64) => ("$bin_prefix/cddlib.v0.94.10.x86_64-unknown-freebsd11.1.tar.gz", "ba46ccb23b2e4a01d3bd52158d3a9531819211bc612b42b6ed9b7bde33c4d07e"),
    Windows(:x86_64) => ("$bin_prefix/cddlib.v0.94.10.x86_64-w64-mingw32.tar.gz", "31f08ebf6b7fe16601e7053a3f1de9863bed3b821da0dec966e0fd1dd4ec9a83"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
