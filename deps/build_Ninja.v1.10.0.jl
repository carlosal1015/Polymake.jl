using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "ninja", :ninja),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Ninja_jll.jl/releases/download/Ninja-v1.10.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.aarch64-linux-gnu-cxx03.tar.gz", "623e65bd8103bbc15cb1e8b8b0149d19be719cfc6a304b4048c522ab4d82046e"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.aarch64-linux-gnu-cxx11.tar.gz", "ff2f3c9a67980cfc1cf1c101e236829f7aeec6ac3af6c6ba86671a5e2b3c7e83"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.aarch64-linux-musl-cxx03.tar.gz", "6764bbdca3e67745879c921c7501d55831118a664e7acb1573e571e21d115d06"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.aarch64-linux-musl-cxx11.tar.gz", "a15e22e2bb35d73f19aeed98c469ea9220d7f19080642b42e43536304d467bf4"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.armv7l-linux-gnueabihf-cxx03.tar.gz", "460a0143f370da7dd788eb2b3b16f39f26138703974a5570850e647babcce801"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.armv7l-linux-gnueabihf-cxx11.tar.gz", "a9ddd4ba0f3e93c56b87797287ac546d7d2fef9d32240213c39a467723b19655"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.armv7l-linux-musleabihf-cxx03.tar.gz", "70e2bd5349a563d8e4293257477f8748d7ceac00a1911790ecaa2a777e7705c0"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.armv7l-linux-musleabihf-cxx11.tar.gz", "231a9f60ee2f09dade2219f0c4d0cced25d4ee7d578690e1b09128e28b4c8648"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.i686-linux-gnu-cxx03.tar.gz", "27e78903c7aa90ef7a214e0c9d23dea6f3d1ed24ae938bc69931a76198fca365"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.i686-linux-gnu-cxx11.tar.gz", "403498aaa5388c46dc15f7f3b3a49d285db2e3457f6441e30c85ffd96072a9e4"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.i686-linux-musl-cxx03.tar.gz", "3944ebeab7e552b4917200fae8923347a506b61677d7a84fa2832f8a474c1c14"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.i686-linux-musl-cxx11.tar.gz", "3c49238860fdc9362be0254fa7abfc1d2ba7452a9c840018e4e0ce2903d38d02"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.i686-w64-mingw32-cxx03.tar.gz", "782e3c81fec66f94ff54eb08e187e2ee5566790f0b054aafbe2dddde8bdd7a51"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.i686-w64-mingw32-cxx11.tar.gz", "6a30bb0bd7c0b9c373bcb34fc83a9fdc98221b4578ad1ee2699dc3acf096d601"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.powerpc64le-linux-gnu-cxx03.tar.gz", "92992946648e5afda5db7bf92429b82ff954bde89fe89168707da39e7b6bb357"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.powerpc64le-linux-gnu-cxx11.tar.gz", "3e639b8516708b6e778fbe7f1552e062e611673d31642c58d54a7ca493ac6ef4"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-apple-darwin14-cxx03.tar.gz", "b2718ef3a712369ad3eb084b9aafb33441e4cd938e44a92c6af4895b43046762"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-apple-darwin14-cxx11.tar.gz", "a24c55b7f4131799f362c4d25224dee903db37400d022eeeb9f1c6a234c8d2f9"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-linux-gnu-cxx03.tar.gz", "24a40b824d9573f354982b15cc9f6a92ed51bf503912d381976648522d71476e"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-linux-gnu-cxx11.tar.gz", "f66512e98f89eb06d5e86c5f59a26cbcf1f72198d72b591b1202f11ed692f2df"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-linux-musl-cxx03.tar.gz", "bc64ae6a44a0a6d5445ddab28872875a72c18cd5c26fb58789eb40145049bb4e"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-linux-musl-cxx11.tar.gz", "164938fea6b3115844bc6accb2e28c119d8f5da5ebb9e29a56c083e5d4e68836"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-unknown-freebsd11.1-cxx03.tar.gz", "6ffac476c0b77235179e83e29121ab87f2226d3b59a38951b867dc608702fe57"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-unknown-freebsd11.1-cxx11.tar.gz", "2c86d4709c41c7baf7db26027ed9ba1924dadc07a5f76c8d0a404a5906791dbf"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-w64-mingw32-cxx03.tar.gz", "104b25eb061a2890991d56b1134dd4084360002de693b196e8f07d52c3fd5069"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Ninja.v1.10.0.x86_64-w64-mingw32-cxx11.tar.gz", "1b978c7f8e960179236d567b81ec92db233459fe8addd5d852b013b4a160b3d3"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
