using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libnormaliz"], :libnormaliz),
    ExecutableProduct(prefix, "normaliz", :normaliz),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/normaliz_jll.jl/releases/download/normaliz-v3.8.4+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.aarch64-linux-gnu-cxx03.tar.gz", "69777f897b1c8ffdd37755e172aae7b96f5c49cc02bcdf58b4921fa4f71bf945"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.aarch64-linux-gnu-cxx11.tar.gz", "cc7368a99632aecb0da332d60740b89fe9437ef53f69ed3cfb1c3a8b5abfb876"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.aarch64-linux-musl-cxx03.tar.gz", "2e4de2f027171dea09dc6ef5042f152c711554e6ae2b3ae523822a8d726f21d7"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.aarch64-linux-musl-cxx11.tar.gz", "ac34a8134d10fd50f3851dca9e931421195c51f681596f017c840a4ba79c45a0"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.armv7l-linux-gnueabihf-cxx03.tar.gz", "8e5fb3cd107145d4ac87a96597b27f645693ff095ffa1aeb357c2c402ba4fb3f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.armv7l-linux-gnueabihf-cxx11.tar.gz", "ee635eb08a65a763e34e52196baf594ff6b97564cc37df49cd29e2f894ef0a0a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.armv7l-linux-musleabihf-cxx03.tar.gz", "5a5caf98434bdccc35b0c7ca10f0d4843bd583a055b85609ef664a679b4ea4c7"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.armv7l-linux-musleabihf-cxx11.tar.gz", "835473fa1bbceceb492e5ed05e94c295bc9f0da8bfaaeae5c433dc1c8ceb1ee2"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.i686-linux-gnu-cxx03.tar.gz", "60fe9d1fd30e0ec203ee6042d651feb70bf793b393ce1f81323e1fcd164b367b"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.i686-linux-gnu-cxx11.tar.gz", "c302b0a2f97b4045cc2e34bb63c37debfe0f220cf3da63c2f226db764a751ddd"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.i686-linux-musl-cxx03.tar.gz", "5ddac2fbe25263fca3b6cec9539d88f86c1fccd83ae3ee77b8b5e556ba2870c7"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.i686-linux-musl-cxx11.tar.gz", "c34c332f29700908008a148392e87ec893d360682b0fdcc7df33fd39cd4bbda3"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.powerpc64le-linux-gnu-cxx03.tar.gz", "5493a8748a7387dd573fc49c9bf5319af46358edd326d6bbedf25543b53ef51b"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.powerpc64le-linux-gnu-cxx11.tar.gz", "cb416edbc15eee1f23e1b00fdb96e090a1f8caeab43602b5a5585edad5920900"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.x86_64-apple-darwin14-cxx03.tar.gz", "b14b23f8b31124e5a7c08c86e440bc93506e6e805a2c4ceee6e243fc6ddf158c"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.x86_64-apple-darwin14-cxx11.tar.gz", "045617ecc21e7634de2efd240265ec552b19acdc5bac6802258588e8cd077d1e"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.x86_64-linux-gnu-cxx03.tar.gz", "32761c36df6ac09cb389120833a8afb06995f5cd9f8b58bad71176286d162612"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.x86_64-linux-gnu-cxx11.tar.gz", "15ecf417d56a0e47f63f54808bea6e97b3c86fdd0b88519a645ee0579637535f"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.x86_64-linux-musl-cxx03.tar.gz", "d0d601f14e97e90b455c9e6781377433de7c4098554ef82fafb4a9d07cc40aea"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.x86_64-linux-musl-cxx11.tar.gz", "ff15250f1bff6be56b696fa42cd77fd672732dfef93646d48d703d1fcdc2c732"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/normaliz.v3.8.4.x86_64-unknown-freebsd11.1-cxx03.tar.gz", "404209aedef5c5568c6623c0187fcc8335c48dc4563f3b4a4577b6f8e50aed33"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/normaliz.v3.8.4.x86_64-unknown-freebsd11.1-cxx11.tar.gz", "9936433d7605cc4fbb6ac5b65b6343cb8bbd363899651e1fd99bb8e1939b795c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
